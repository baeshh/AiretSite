Goal
When the user navigates via the site NavBar to any different route (e.g., /about, /product, /patent, /media, /innovation, /team), the destination view must always open at the top of the page (scroll position 0,0).

Scope

Applies to all internal route changes triggered by NavBar links or programmatic navigation.

Does not affect in-page hash links (anchors like #specs) or external links.

Behavior

On every internal navigation, reset the document scroll to (top=0, left=0) immediately after the route change and initial hydration complete.

Disable browser auto-restoration so the previous page’s scroll is never reused.

If a view transition or async hydration repositions the scroll, perform a second immediate reset on the next animation frame to guarantee 0,0.

Respect prefers-reduced-motion: use instant jump (no smooth scrolling).

Implementation Requirements (no code, just do this)

Set manual scroll restoration globally so the browser never restores old positions.

Hook into the app’s client-side navigation lifecycle so the reset runs on: initial load, client transitions, and back/forward history events.

In the NavBar, treat links as follows:

Internal route (same origin, non-hash): trigger top reset on navigation.

Hash link (href starts with #): do not reset scroll.

External link (different origin): do not reset scroll.

Ensure this logic runs exactly once per navigation, after the new page is ready (post-hydration).

Edge Cases

If any page lazily injects content that pushes layout after load, schedule an additional top reset in requestAnimationFrame to maintain (0,0).

Do not override user-initiated anchor jumps or hash-based tabs.

Maintain compatibility with Astro + React Islands routing.

Acceptance Criteria

Navigating to any different internal route via NavBar always lands at the very top of the page.

Anchor links and external links behave normally (no forced top).

Works on initial load, client transitions, and browser back/forward.

No smooth scroll; the jump is instant and shows no visual jank.